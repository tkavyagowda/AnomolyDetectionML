# -*- coding: utf-8 -*-
"""Prophet_AnomalyDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cZNJaF_PYCmJkpCNT9F8TLgWA2wtbXUM
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib as pyplot
import altair as alt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from pandas import datetime
from tqdm import tqdm
import plotly.graph_objects as go

# %matplotlib inline
from fbprophet import Prophet

pip install sklearn

#def parser(x):
#	return datetime.strptime(x, '%d-%m-%Y %H:%M')

#speed_df = pd.read_csv('/content/Battery.csv', header=0, parse_dates=[0], index_col=0, squeeze=True, date_parser=parser, error_bad_lines=False)
#print(speed_df.head())
#speed_df.plot()

training_filename = '/content/BatteryTemp.csv'
train = pd.read_csv(training_filename, error_bad_lines='ignore')

valid_filename = '/content/test.csv'
test = pd.read_csv(valid_filename)
#pyplot.show()

def parse_and_standardize(df: pd.DataFrame, scaler: StandardScaler = None):
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['stand_value'] = df['value']
    if not scaler:
        scaler = StandardScaler()
        scaler.fit(df['stand_value'].values.reshape(-1, 1))
    df['stand_value'] = scaler.transform(df['stand_value'].values.reshape(-1, 1))
    return scaler

data_scaler = parse_and_standardize(train)
parse_and_standardize(test, data_scaler)

train.head()

train=train.set_index('timestamp').resample("H").mean()

import plotly.express as px
fig = px.scatter(train.reset_index(), x='timestamp', y='value', title='Batery Temperature')

fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list([
                      dict(count=1, label="1y", step="year", stepmode="backward"),
                      dict(count=2, label="3y", step="year", stepmode="backward"),
                      dict(count=3, label="5y", step="year", stepmode="backward"),
                      dict(step="all")
        ])
    )
)
fig.show()

df = train.reset_index()[['timestamp','value']].rename({"timestamp":'ds', 'value':'y'}, axis='columns')

df.shape

m = Prophet(changepoint_range=0.95)

m.fit(df)

future = m.make_future_dataframe(periods=120, freq='H')
future.tail(180)

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

results=pd.concat([df.set_index('ds')['y'], forecast.set_index('ds')[['yhat', 'yhat_lower', 'yhat_upper']]], axis=1)

fig1 = m.plot(forecast)

comp=m.plot_components(forecast)

results

results['error'] = results['y'] - results['yhat']

results["uncertainty"] = results['yhat_upper'] - results['yhat_lower']

results

results[results['error'].abs() > 1.5*results['uncertainty']]

results['anomaly'] = results.apply(lambda x: 'Yes' if(np.abs(x['error']) > 1.5*x['uncertainty']) else 'No', axis=1)

results

fig = px.scatter(results.reset_index(), x='ds', y='y', color='anomaly', title='Battery Temperature')

fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list([
                      dict(count=1, label="1y", step="year", stepmode="backward"),
                      dict(count=2, label="3y", step="year", stepmode="backward"),
                      dict(count=3, label="5y", step="year", stepmode="backward"),
                      dict(step="all")
        ])
    )
)

fig.show()

comp = m.plot_components(forecast)



results.dropna(inplace=True)

results.tail()

mean_squared_error(results.y, results.yhat)

from math import sqrt
rms = sqrt(mean_squared_error(results.y, results.yhat))
print(rms)

mean_absolute_error(results.y, results.yhat)

r2_score(results.y, results.yhat)
